#####################################################################
#   Macros
#####################################################################

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
gcode:
    # Parameters - Passing values from slicer to firmware
    {% set bedtemp = params.BED|int %} 
    {% set hotendtemp = params.HOTEND|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}

	G90							   		; use absolute coordinates
	M83  						   		; Make the E relative independant of other axis
    M104 S150
	M140 S{bedtemp}		                ; set bed temp

    M117 Homing...
    CG28                                ; home if not already homed 
    
	M117 Heating...
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z2 F18000             ; Move hotend a sufficent distance from heatbed for heatsoak
	M190 S{bedtemp}		                ; wait for bed to reach temp

    SYNC_MOTORS                         ; sync AWD motors after preheat

    WIPE_NOZZLE                         ; wipe nozzle before beacon calibrates

    G28 Z METHOD=CONTACT CALIBRATE=1
    FAST_Z_TILT                          ; adjust for heatsoak

	M117 Performing Bed Mesh...
    BED_MESH_CALIBRATE RUNS=2			; perform bed mesh calibration
	BED_MESH_PROFILE LOAD=default

    WIPE_NOZZLE

    M117 Homing Z...
    G28 Z METHOD=CONTACT CALIBRATE=0    ; Homing Z 

    M117 Final Heating...
    G0 X252 Y309.5 Z7 F18000            ; Move hotend a sufficent distance from heatbed for heatsoak
    M109 S{hotendtemp}		            ; wait for extruder to reach temp

    M117 Cleaning Nozzle...
    CLEAN_NOZZLE                        ; Clean print nozzle

    # set nozzle thermal expansion offset
    {% if printer.configfile.settings.beacon is defined %}
        _BEACON_SET_NOZZLE_TEMP_OFFSET 
    {% endif %}

	M117 Starting Print...
    LINE_PURGE

    SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
    
    SKEW_PROFILE LOAD=calilantern_skew_profile

	M117 Printing...

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set FILAMENT = params.MATERIAL|default('none')|string %} 
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder

    # conditional retract to avoid nozzle clog with TPU 
    {% if params.FILAMENT == "TPU" %}
    G1 E-5 F300                     
    {% else %}
    G1 E-15.0 F1200                
    {% endif %}    

    TURN_OFF_HEATERS
    
    SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fans
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0

    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    
    M117 Idle

    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
    BED_MESH_CLEAR
    BED_MESH_PROFILE REMOVE="default"
    SET_SKEW CLEAR=1
    Set_Speed

    # reset nozzle thermal expansion offset
    {% if printer.configfile.settings.beacon is defined %}
        _BEACON_REMOVE_NOZZLE_TEMP_OFFSET
        _BEACON_SET_NOZZLE_TEMP_OFFSET RESET=True
    {% endif %}

    #SET_GCODE_OFFSET Z=0.0

[gcode_macro M600]
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
        SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0
        SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0                                        
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        M117 Filament Change
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        G1 E-80.0 F300                                                                       ; retract filament for pull
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)                                                                            ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro Bake_Timeout_Toggle]
variable_timeout_set = 0 
gcode:
    {%  if printer["gcode_macro Bake_Timeout_Toggle"].timeout_set == 0 %}
        SET_IDLE_TIMEOUT TIMEOUT=43200
        SET_GCODE_VARIABLE MACRO=Bake_Timeout_Toggle VARIABLE=timeout_set VALUE=1
        RESPOND MSG="Idle timeout set to 12 hours"
    {% else %}
        SET_IDLE_TIMEOUT TIMEOUT=1800
        SET_GCODE_VARIABLE MACRO=Bake_Timeout_Toggle VARIABLE=timeout_set VALUE=0
        RESPOND MSG="Idle timeout set to 30 minutes"
    {% endif %}

[gcode_macro Extruder_Disable]
gcode:
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0

[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro CZTA]
gcode:
    {% if printer.z_tilt.applied == False %}
        FAST_Z_TILT 
    {% endif %}

[gcode_macro FAST_Z_TILT]
gcode:
    M117 Z_TILT
    {% if printer.configfile.settings.z_tilt %}
        {% if printer.z_tilt.applied == False %}
            Z_TILT_ADJUST RETRY_TOLERANCE=1
        {% endif %}
        Z_TILT_ADJUST horizontal_move_z=2
    {% endif %}

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    Z_TILT_ADJUST

[gcode_macro Lights]
variable_lights_on = 1 
gcode:
    {%  if printer["gcode_macro Lights"].lights_on == 1 %}
        SET_PIN PIN=encloser_light VALUE=0

        SET_LED LED=Xol RED=0 GREEN=0 WHITE=0 BLUE=0 INDEX=1

        SET_LED LED=decklights RED=0 GREEN=0 BLUE=0
        
        SET_GCODE_VARIABLE MACRO=Lights VARIABLE=lights_on VALUE=0
    {% else %}
        SET_PIN PIN=encloser_light VALUE=0.40

        SET_LED LED=Xol RED=0.50 GREEN=0.00 BLUE=0.00 INDEX=1 

        SET_LED LED=decklights RED=1 GREEN=0 BLUE=0

        SET_GCODE_VARIABLE MACRO=Lights VARIABLE=lights_on VALUE=1
    {% endif %}
    
[delayed_gcode Welcome_1]
initial_duration: 0.1
gcode:
    SET_LED LED=Xol RED=0.50 GREEN=0.00 BLUE=0.00 INDEX=1 

    SET_LED LED=decklights RED=1 GREEN=0 BLUE=0

    SET_PIN PIN=encloser_light VALUE=0.40
       
    Set_Speed

[gcode_macro Set_Speed]
gcode:
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=12
    SET_VELOCITY_LIMIT ACCEL=20000
    SET_VELOCITY_LIMIT VELOCITY=450
    
[gcode_macro Motor_Sync]
gcode:
    SYNC_MOTORS

[gcode_macro Beacon_Nozzle_Calibrate]
gcode:
    BEACON_CALIBRATE_NOZZLE_TEMP_OFFSET
    
[gcode_macro Center]
gcode:
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F18000

[gcode_macro Front]
gcode:
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+15} F18000

[gcode_macro Rear]
gcode:
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-5} F18000

[gcode_macro Z_Override]
gcode:
        SET_KINEMATIC_POSITION Z=50

[gcode_macro WIPE_NOZZLE]
variable_start_x: 252
variable_start_y: 309.5
variable_start_z: 1
variable_wipe_dist: -52
variable_wipe_qty: 5
variable_wipe_spd: 200
variable_raise_distance: 10

gcode:
    CG28        ; home if not homed
    G90         ; absolute positioning

    ## Move nozzle to start position
    G1 X{start_x} Y{start_y} F6000
    G1 Z{start_z} F1500

    ## Wipe nozzle
    {% for wipes in range(1, (wipe_qty + 1)) %}
        G1 X{start_x + wipe_dist} F{wipe_spd * 60}
        G1 X{start_x} F{wipe_spd * 60}
    {% endfor %}

    ## Raise nozzle
    G1 Z{raise_distance} F1500

[gcode_macro CLEAN_NOZZLE]
variable_start_x: 252
variable_start_y: 309.5
variable_start_z: 1
variable_wipe_dist: -52
variable_wipe_qty_purge: 1
variable_wipe_qty: 10
variable_wipe_spd: 200
variable_raise_distance: 20

gcode:
    CG28        ; home if not homed
    G90         ; absolute positioning

    ## Move nozzle to start position
    G1 X{start_x} Y{start_y} F6000
    G1 Z{start_z} F1500

    ## Wipe nozzle and purge
    {% for wipes in range(1, (wipe_qty_purge + 1)) %}
        G1 X{start_x + wipe_dist} F{wipe_spd * 60}
        G1 X{start_x} F{wipe_spd * 60}
    {% endfor %}
    
    G1 X{start_x + 10} Y{start_y} F6000
    G1 E45 F300

    ## Move nozzle back to start position
    G1 X{start_x} Y{start_y} F6000
    G1 Z{start_z} F1500

    ## Wipe nozzle
    {% for wipes in range(1, (wipe_qty + 1)) %}
        G1 X{start_x + wipe_dist} F{wipe_spd * 60}
        G1 X{start_x} F{wipe_spd * 60}
    {% endfor %}

    ## Raise nozzle
    G1 Z{raise_distance} F1500

[gcode_macro Filament_Change_Purge]
gcode:
    G1 X260 Y309.5 F6000
    G1 Z5 F1500

    G1 E100 F300

    WIPE_NOZZLE
    
[delayed_gcode DISABLEFILAMENTSENSOR]   
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
        SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0
        SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0                                 ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1
        SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1                           ; enable filament sensor
        #RESETRGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}   
        M117                          
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    M107
    SET_GCODE_OFFSET Z=0.0
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0
    BED_MESH_CLEAR
    BED_MESH_PROFILE REMOVE="default"
    SET_SKEW CLEAR=1
    SDCARD_RESET_FILE
    Set_Speed
    PRINT_END
    BASE_CANCEL_PRINT
